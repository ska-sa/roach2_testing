# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ftdi', [dirname(__file__)])
        except ImportError:
            import _ftdi
            return _ftdi
        if fp is not None:
            try:
                _mod = imp.load_module('_ftdi', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ftdi = swig_import_helper()
    del swig_import_helper
else:
    import _ftdi
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def new_uintp():
  return _ftdi.new_uintp()
new_uintp = _ftdi.new_uintp

def copy_uintp(*args):
  return _ftdi.copy_uintp(*args)
copy_uintp = _ftdi.copy_uintp

def delete_uintp(*args):
  return _ftdi.delete_uintp(*args)
delete_uintp = _ftdi.delete_uintp

def uintp_assign(*args):
  return _ftdi.uintp_assign(*args)
uintp_assign = _ftdi.uintp_assign

def uintp_value(*args):
  return _ftdi.uintp_value(*args)
uintp_value = _ftdi.uintp_value

def new_ucharp():
  return _ftdi.new_ucharp()
new_ucharp = _ftdi.new_ucharp

def copy_ucharp(*args):
  return _ftdi.copy_ucharp(*args)
copy_ucharp = _ftdi.copy_ucharp

def delete_ucharp(*args):
  return _ftdi.delete_ucharp(*args)
delete_ucharp = _ftdi.delete_ucharp

def ucharp_assign(*args):
  return _ftdi.ucharp_assign(*args)
ucharp_assign = _ftdi.ucharp_assign

def ucharp_value(*args):
  return _ftdi.ucharp_value(*args)
ucharp_value = _ftdi.ucharp_value

def new_charp():
  return _ftdi.new_charp()
new_charp = _ftdi.new_charp

def copy_charp(*args):
  return _ftdi.copy_charp(*args)
copy_charp = _ftdi.copy_charp

def delete_charp(*args):
  return _ftdi.delete_charp(*args)
delete_charp = _ftdi.delete_charp

def charp_assign(*args):
  return _ftdi.charp_assign(*args)
charp_assign = _ftdi.charp_assign

def charp_value(*args):
  return _ftdi.charp_value(*args)
charp_value = _ftdi.charp_value

def ftdi_read_data(*args):
  return _ftdi.ftdi_read_data(*args)
ftdi_read_data = _ftdi.ftdi_read_data

def ftdi_read_data_get_chunksize(*args):
  return _ftdi.ftdi_read_data_get_chunksize(*args)
ftdi_read_data_get_chunksize = _ftdi.ftdi_read_data_get_chunksize

def ftdi_write_data_get_chunksize(*args):
  return _ftdi.ftdi_write_data_get_chunksize(*args)
ftdi_write_data_get_chunksize = _ftdi.ftdi_write_data_get_chunksize

def ftdi_read_pins(*args):
  return _ftdi.ftdi_read_pins(*args)
ftdi_read_pins = _ftdi.ftdi_read_pins

def ftdi_get_latency_timer(*args):
  return _ftdi.ftdi_get_latency_timer(*args)
ftdi_get_latency_timer = _ftdi.ftdi_get_latency_timer

def ftdi_poll_modem_status(*args):
  return _ftdi.ftdi_poll_modem_status(*args)
ftdi_poll_modem_status = _ftdi.ftdi_poll_modem_status

def ftdi_eeprom_build(*args):
  return _ftdi.ftdi_eeprom_build(*args)
ftdi_eeprom_build = _ftdi.ftdi_eeprom_build

def ftdi_read_eeprom(*args):
  return _ftdi.ftdi_read_eeprom(*args)
ftdi_read_eeprom = _ftdi.ftdi_read_eeprom

def ftdi_write_eeprom(*args):
  return _ftdi.ftdi_write_eeprom(*args)
ftdi_write_eeprom = _ftdi.ftdi_write_eeprom

def ftdi_read_chipid(*args):
  return _ftdi.ftdi_read_chipid(*args)
ftdi_read_chipid = _ftdi.ftdi_read_chipid
FTDI_DEFAULT_EEPROM_SIZE = _ftdi.FTDI_DEFAULT_EEPROM_SIZE
TYPE_AM = _ftdi.TYPE_AM
TYPE_BM = _ftdi.TYPE_BM
TYPE_2232C = _ftdi.TYPE_2232C
TYPE_R = _ftdi.TYPE_R
TYPE_2232H = _ftdi.TYPE_2232H
TYPE_4232H = _ftdi.TYPE_4232H
NONE = _ftdi.NONE
ODD = _ftdi.ODD
EVEN = _ftdi.EVEN
MARK = _ftdi.MARK
SPACE = _ftdi.SPACE
STOP_BIT_1 = _ftdi.STOP_BIT_1
STOP_BIT_15 = _ftdi.STOP_BIT_15
STOP_BIT_2 = _ftdi.STOP_BIT_2
BITS_7 = _ftdi.BITS_7
BITS_8 = _ftdi.BITS_8
BREAK_OFF = _ftdi.BREAK_OFF
BREAK_ON = _ftdi.BREAK_ON
BITMODE_RESET = _ftdi.BITMODE_RESET
BITMODE_BITBANG = _ftdi.BITMODE_BITBANG
BITMODE_MPSSE = _ftdi.BITMODE_MPSSE
BITMODE_SYNCBB = _ftdi.BITMODE_SYNCBB
BITMODE_MCU = _ftdi.BITMODE_MCU
BITMODE_OPTO = _ftdi.BITMODE_OPTO
BITMODE_CBUS = _ftdi.BITMODE_CBUS
BITMODE_SYNCFF = _ftdi.BITMODE_SYNCFF
INTERFACE_ANY = _ftdi.INTERFACE_ANY
INTERFACE_A = _ftdi.INTERFACE_A
INTERFACE_B = _ftdi.INTERFACE_B
INTERFACE_C = _ftdi.INTERFACE_C
INTERFACE_D = _ftdi.INTERFACE_D
AUTO_DETACH_SIO_MODULE = _ftdi.AUTO_DETACH_SIO_MODULE
DONT_DETACH_SIO_MODULE = _ftdi.DONT_DETACH_SIO_MODULE
MPSSE_WRITE_NEG = _ftdi.MPSSE_WRITE_NEG
MPSSE_BITMODE = _ftdi.MPSSE_BITMODE
MPSSE_READ_NEG = _ftdi.MPSSE_READ_NEG
MPSSE_LSB = _ftdi.MPSSE_LSB
MPSSE_DO_WRITE = _ftdi.MPSSE_DO_WRITE
MPSSE_DO_READ = _ftdi.MPSSE_DO_READ
MPSSE_WRITE_TMS = _ftdi.MPSSE_WRITE_TMS
SET_BITS_LOW = _ftdi.SET_BITS_LOW
SET_BITS_HIGH = _ftdi.SET_BITS_HIGH
GET_BITS_LOW = _ftdi.GET_BITS_LOW
GET_BITS_HIGH = _ftdi.GET_BITS_HIGH
LOOPBACK_START = _ftdi.LOOPBACK_START
LOOPBACK_END = _ftdi.LOOPBACK_END
TCK_DIVISOR = _ftdi.TCK_DIVISOR
SEND_IMMEDIATE = _ftdi.SEND_IMMEDIATE
WAIT_ON_HIGH = _ftdi.WAIT_ON_HIGH
WAIT_ON_LOW = _ftdi.WAIT_ON_LOW
READ_SHORT = _ftdi.READ_SHORT
READ_EXTENDED = _ftdi.READ_EXTENDED
WRITE_SHORT = _ftdi.WRITE_SHORT
WRITE_EXTENDED = _ftdi.WRITE_EXTENDED
SIO_RESET = _ftdi.SIO_RESET
SIO_MODEM_CTRL = _ftdi.SIO_MODEM_CTRL
SIO_SET_FLOW_CTRL = _ftdi.SIO_SET_FLOW_CTRL
SIO_SET_BAUD_RATE = _ftdi.SIO_SET_BAUD_RATE
SIO_SET_DATA = _ftdi.SIO_SET_DATA
SIO_RESET_REQUEST = _ftdi.SIO_RESET_REQUEST
SIO_SET_BAUDRATE_REQUEST = _ftdi.SIO_SET_BAUDRATE_REQUEST
SIO_SET_DATA_REQUEST = _ftdi.SIO_SET_DATA_REQUEST
SIO_SET_FLOW_CTRL_REQUEST = _ftdi.SIO_SET_FLOW_CTRL_REQUEST
SIO_SET_MODEM_CTRL_REQUEST = _ftdi.SIO_SET_MODEM_CTRL_REQUEST
SIO_POLL_MODEM_STATUS_REQUEST = _ftdi.SIO_POLL_MODEM_STATUS_REQUEST
SIO_SET_EVENT_CHAR_REQUEST = _ftdi.SIO_SET_EVENT_CHAR_REQUEST
SIO_SET_ERROR_CHAR_REQUEST = _ftdi.SIO_SET_ERROR_CHAR_REQUEST
SIO_SET_LATENCY_TIMER_REQUEST = _ftdi.SIO_SET_LATENCY_TIMER_REQUEST
SIO_GET_LATENCY_TIMER_REQUEST = _ftdi.SIO_GET_LATENCY_TIMER_REQUEST
SIO_SET_BITMODE_REQUEST = _ftdi.SIO_SET_BITMODE_REQUEST
SIO_READ_PINS_REQUEST = _ftdi.SIO_READ_PINS_REQUEST
SIO_READ_EEPROM_REQUEST = _ftdi.SIO_READ_EEPROM_REQUEST
SIO_WRITE_EEPROM_REQUEST = _ftdi.SIO_WRITE_EEPROM_REQUEST
SIO_ERASE_EEPROM_REQUEST = _ftdi.SIO_ERASE_EEPROM_REQUEST
SIO_RESET_SIO = _ftdi.SIO_RESET_SIO
SIO_RESET_PURGE_RX = _ftdi.SIO_RESET_PURGE_RX
SIO_RESET_PURGE_TX = _ftdi.SIO_RESET_PURGE_TX
SIO_DISABLE_FLOW_CTRL = _ftdi.SIO_DISABLE_FLOW_CTRL
SIO_RTS_CTS_HS = _ftdi.SIO_RTS_CTS_HS
SIO_DTR_DSR_HS = _ftdi.SIO_DTR_DSR_HS
SIO_XON_XOFF_HS = _ftdi.SIO_XON_XOFF_HS
SIO_SET_DTR_MASK = _ftdi.SIO_SET_DTR_MASK
SIO_SET_DTR_HIGH = _ftdi.SIO_SET_DTR_HIGH
SIO_SET_DTR_LOW = _ftdi.SIO_SET_DTR_LOW
SIO_SET_RTS_MASK = _ftdi.SIO_SET_RTS_MASK
SIO_SET_RTS_HIGH = _ftdi.SIO_SET_RTS_HIGH
SIO_SET_RTS_LOW = _ftdi.SIO_SET_RTS_LOW
class ftdi_context(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ftdi_context, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ftdi_context, name)
    __repr__ = _swig_repr
    __swig_setmethods__["usb_dev"] = _ftdi.ftdi_context_usb_dev_set
    __swig_getmethods__["usb_dev"] = _ftdi.ftdi_context_usb_dev_get
    if _newclass:usb_dev = _swig_property(_ftdi.ftdi_context_usb_dev_get, _ftdi.ftdi_context_usb_dev_set)
    __swig_setmethods__["usb_read_timeout"] = _ftdi.ftdi_context_usb_read_timeout_set
    __swig_getmethods__["usb_read_timeout"] = _ftdi.ftdi_context_usb_read_timeout_get
    if _newclass:usb_read_timeout = _swig_property(_ftdi.ftdi_context_usb_read_timeout_get, _ftdi.ftdi_context_usb_read_timeout_set)
    __swig_setmethods__["usb_write_timeout"] = _ftdi.ftdi_context_usb_write_timeout_set
    __swig_getmethods__["usb_write_timeout"] = _ftdi.ftdi_context_usb_write_timeout_get
    if _newclass:usb_write_timeout = _swig_property(_ftdi.ftdi_context_usb_write_timeout_get, _ftdi.ftdi_context_usb_write_timeout_set)
    __swig_setmethods__["type"] = _ftdi.ftdi_context_type_set
    __swig_getmethods__["type"] = _ftdi.ftdi_context_type_get
    if _newclass:type = _swig_property(_ftdi.ftdi_context_type_get, _ftdi.ftdi_context_type_set)
    __swig_setmethods__["baudrate"] = _ftdi.ftdi_context_baudrate_set
    __swig_getmethods__["baudrate"] = _ftdi.ftdi_context_baudrate_get
    if _newclass:baudrate = _swig_property(_ftdi.ftdi_context_baudrate_get, _ftdi.ftdi_context_baudrate_set)
    __swig_setmethods__["bitbang_enabled"] = _ftdi.ftdi_context_bitbang_enabled_set
    __swig_getmethods__["bitbang_enabled"] = _ftdi.ftdi_context_bitbang_enabled_get
    if _newclass:bitbang_enabled = _swig_property(_ftdi.ftdi_context_bitbang_enabled_get, _ftdi.ftdi_context_bitbang_enabled_set)
    __swig_setmethods__["readbuffer"] = _ftdi.ftdi_context_readbuffer_set
    __swig_getmethods__["readbuffer"] = _ftdi.ftdi_context_readbuffer_get
    if _newclass:readbuffer = _swig_property(_ftdi.ftdi_context_readbuffer_get, _ftdi.ftdi_context_readbuffer_set)
    __swig_setmethods__["readbuffer_offset"] = _ftdi.ftdi_context_readbuffer_offset_set
    __swig_getmethods__["readbuffer_offset"] = _ftdi.ftdi_context_readbuffer_offset_get
    if _newclass:readbuffer_offset = _swig_property(_ftdi.ftdi_context_readbuffer_offset_get, _ftdi.ftdi_context_readbuffer_offset_set)
    __swig_setmethods__["readbuffer_remaining"] = _ftdi.ftdi_context_readbuffer_remaining_set
    __swig_getmethods__["readbuffer_remaining"] = _ftdi.ftdi_context_readbuffer_remaining_get
    if _newclass:readbuffer_remaining = _swig_property(_ftdi.ftdi_context_readbuffer_remaining_get, _ftdi.ftdi_context_readbuffer_remaining_set)
    __swig_setmethods__["readbuffer_chunksize"] = _ftdi.ftdi_context_readbuffer_chunksize_set
    __swig_getmethods__["readbuffer_chunksize"] = _ftdi.ftdi_context_readbuffer_chunksize_get
    if _newclass:readbuffer_chunksize = _swig_property(_ftdi.ftdi_context_readbuffer_chunksize_get, _ftdi.ftdi_context_readbuffer_chunksize_set)
    __swig_setmethods__["writebuffer_chunksize"] = _ftdi.ftdi_context_writebuffer_chunksize_set
    __swig_getmethods__["writebuffer_chunksize"] = _ftdi.ftdi_context_writebuffer_chunksize_get
    if _newclass:writebuffer_chunksize = _swig_property(_ftdi.ftdi_context_writebuffer_chunksize_get, _ftdi.ftdi_context_writebuffer_chunksize_set)
    __swig_setmethods__["max_packet_size"] = _ftdi.ftdi_context_max_packet_size_set
    __swig_getmethods__["max_packet_size"] = _ftdi.ftdi_context_max_packet_size_get
    if _newclass:max_packet_size = _swig_property(_ftdi.ftdi_context_max_packet_size_get, _ftdi.ftdi_context_max_packet_size_set)
    __swig_setmethods__["interface"] = _ftdi.ftdi_context_interface_set
    __swig_getmethods__["interface"] = _ftdi.ftdi_context_interface_get
    if _newclass:interface = _swig_property(_ftdi.ftdi_context_interface_get, _ftdi.ftdi_context_interface_set)
    __swig_setmethods__["index"] = _ftdi.ftdi_context_index_set
    __swig_getmethods__["index"] = _ftdi.ftdi_context_index_get
    if _newclass:index = _swig_property(_ftdi.ftdi_context_index_get, _ftdi.ftdi_context_index_set)
    __swig_setmethods__["in_ep"] = _ftdi.ftdi_context_in_ep_set
    __swig_getmethods__["in_ep"] = _ftdi.ftdi_context_in_ep_get
    if _newclass:in_ep = _swig_property(_ftdi.ftdi_context_in_ep_get, _ftdi.ftdi_context_in_ep_set)
    __swig_setmethods__["out_ep"] = _ftdi.ftdi_context_out_ep_set
    __swig_getmethods__["out_ep"] = _ftdi.ftdi_context_out_ep_get
    if _newclass:out_ep = _swig_property(_ftdi.ftdi_context_out_ep_get, _ftdi.ftdi_context_out_ep_set)
    __swig_setmethods__["bitbang_mode"] = _ftdi.ftdi_context_bitbang_mode_set
    __swig_getmethods__["bitbang_mode"] = _ftdi.ftdi_context_bitbang_mode_get
    if _newclass:bitbang_mode = _swig_property(_ftdi.ftdi_context_bitbang_mode_get, _ftdi.ftdi_context_bitbang_mode_set)
    __swig_setmethods__["eeprom_size"] = _ftdi.ftdi_context_eeprom_size_set
    __swig_getmethods__["eeprom_size"] = _ftdi.ftdi_context_eeprom_size_get
    if _newclass:eeprom_size = _swig_property(_ftdi.ftdi_context_eeprom_size_get, _ftdi.ftdi_context_eeprom_size_set)
    __swig_setmethods__["error_str"] = _ftdi.ftdi_context_error_str_set
    __swig_getmethods__["error_str"] = _ftdi.ftdi_context_error_str_get
    if _newclass:error_str = _swig_property(_ftdi.ftdi_context_error_str_get, _ftdi.ftdi_context_error_str_set)
    __swig_setmethods__["async_usb_buffer"] = _ftdi.ftdi_context_async_usb_buffer_set
    __swig_getmethods__["async_usb_buffer"] = _ftdi.ftdi_context_async_usb_buffer_get
    if _newclass:async_usb_buffer = _swig_property(_ftdi.ftdi_context_async_usb_buffer_get, _ftdi.ftdi_context_async_usb_buffer_set)
    __swig_setmethods__["async_usb_buffer_size"] = _ftdi.ftdi_context_async_usb_buffer_size_set
    __swig_getmethods__["async_usb_buffer_size"] = _ftdi.ftdi_context_async_usb_buffer_size_get
    if _newclass:async_usb_buffer_size = _swig_property(_ftdi.ftdi_context_async_usb_buffer_size_get, _ftdi.ftdi_context_async_usb_buffer_size_set)
    __swig_setmethods__["module_detach_mode"] = _ftdi.ftdi_context_module_detach_mode_set
    __swig_getmethods__["module_detach_mode"] = _ftdi.ftdi_context_module_detach_mode_get
    if _newclass:module_detach_mode = _swig_property(_ftdi.ftdi_context_module_detach_mode_get, _ftdi.ftdi_context_module_detach_mode_set)
    def __init__(self): 
        this = _ftdi.new_ftdi_context()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ftdi.delete_ftdi_context
    __del__ = lambda self : None;
ftdi_context_swigregister = _ftdi.ftdi_context_swigregister
ftdi_context_swigregister(ftdi_context)

class ftdi_device_list(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ftdi_device_list, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ftdi_device_list, name)
    __repr__ = _swig_repr
    __swig_setmethods__["next"] = _ftdi.ftdi_device_list_next_set
    __swig_getmethods__["next"] = _ftdi.ftdi_device_list_next_get
    if _newclass:next = _swig_property(_ftdi.ftdi_device_list_next_get, _ftdi.ftdi_device_list_next_set)
    __swig_setmethods__["dev"] = _ftdi.ftdi_device_list_dev_set
    __swig_getmethods__["dev"] = _ftdi.ftdi_device_list_dev_get
    if _newclass:dev = _swig_property(_ftdi.ftdi_device_list_dev_get, _ftdi.ftdi_device_list_dev_set)
    def __init__(self): 
        this = _ftdi.new_ftdi_device_list()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ftdi.delete_ftdi_device_list
    __del__ = lambda self : None;
ftdi_device_list_swigregister = _ftdi.ftdi_device_list_swigregister
ftdi_device_list_swigregister(ftdi_device_list)

CBUS_TXDEN = _ftdi.CBUS_TXDEN
CBUS_PWREN = _ftdi.CBUS_PWREN
CBUS_RXLED = _ftdi.CBUS_RXLED
CBUS_TXLED = _ftdi.CBUS_TXLED
CBUS_TXRXLED = _ftdi.CBUS_TXRXLED
CBUS_SLEEP = _ftdi.CBUS_SLEEP
CBUS_CLK48 = _ftdi.CBUS_CLK48
CBUS_CLK24 = _ftdi.CBUS_CLK24
CBUS_CLK12 = _ftdi.CBUS_CLK12
CBUS_CLK6 = _ftdi.CBUS_CLK6
CBUS_IOMODE = _ftdi.CBUS_IOMODE
CBUS_BB_WR = _ftdi.CBUS_BB_WR
CBUS_BB_RD = _ftdi.CBUS_BB_RD
INVERT_TXD = _ftdi.INVERT_TXD
INVERT_RXD = _ftdi.INVERT_RXD
INVERT_RTS = _ftdi.INVERT_RTS
INVERT_CTS = _ftdi.INVERT_CTS
INVERT_DTR = _ftdi.INVERT_DTR
INVERT_DSR = _ftdi.INVERT_DSR
INVERT_DCD = _ftdi.INVERT_DCD
INVERT_RI = _ftdi.INVERT_RI
HIGH_CURRENT_DRIVE = _ftdi.HIGH_CURRENT_DRIVE
class ftdi_eeprom(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ftdi_eeprom, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ftdi_eeprom, name)
    __repr__ = _swig_repr
    __swig_setmethods__["vendor_id"] = _ftdi.ftdi_eeprom_vendor_id_set
    __swig_getmethods__["vendor_id"] = _ftdi.ftdi_eeprom_vendor_id_get
    if _newclass:vendor_id = _swig_property(_ftdi.ftdi_eeprom_vendor_id_get, _ftdi.ftdi_eeprom_vendor_id_set)
    __swig_setmethods__["product_id"] = _ftdi.ftdi_eeprom_product_id_set
    __swig_getmethods__["product_id"] = _ftdi.ftdi_eeprom_product_id_get
    if _newclass:product_id = _swig_property(_ftdi.ftdi_eeprom_product_id_get, _ftdi.ftdi_eeprom_product_id_set)
    __swig_setmethods__["self_powered"] = _ftdi.ftdi_eeprom_self_powered_set
    __swig_getmethods__["self_powered"] = _ftdi.ftdi_eeprom_self_powered_get
    if _newclass:self_powered = _swig_property(_ftdi.ftdi_eeprom_self_powered_get, _ftdi.ftdi_eeprom_self_powered_set)
    __swig_setmethods__["remote_wakeup"] = _ftdi.ftdi_eeprom_remote_wakeup_set
    __swig_getmethods__["remote_wakeup"] = _ftdi.ftdi_eeprom_remote_wakeup_get
    if _newclass:remote_wakeup = _swig_property(_ftdi.ftdi_eeprom_remote_wakeup_get, _ftdi.ftdi_eeprom_remote_wakeup_set)
    __swig_setmethods__["chip_type"] = _ftdi.ftdi_eeprom_chip_type_set
    __swig_getmethods__["chip_type"] = _ftdi.ftdi_eeprom_chip_type_get
    if _newclass:chip_type = _swig_property(_ftdi.ftdi_eeprom_chip_type_get, _ftdi.ftdi_eeprom_chip_type_set)
    __swig_setmethods__["in_is_isochronous"] = _ftdi.ftdi_eeprom_in_is_isochronous_set
    __swig_getmethods__["in_is_isochronous"] = _ftdi.ftdi_eeprom_in_is_isochronous_get
    if _newclass:in_is_isochronous = _swig_property(_ftdi.ftdi_eeprom_in_is_isochronous_get, _ftdi.ftdi_eeprom_in_is_isochronous_set)
    __swig_setmethods__["out_is_isochronous"] = _ftdi.ftdi_eeprom_out_is_isochronous_set
    __swig_getmethods__["out_is_isochronous"] = _ftdi.ftdi_eeprom_out_is_isochronous_get
    if _newclass:out_is_isochronous = _swig_property(_ftdi.ftdi_eeprom_out_is_isochronous_get, _ftdi.ftdi_eeprom_out_is_isochronous_set)
    __swig_setmethods__["suspend_pull_downs"] = _ftdi.ftdi_eeprom_suspend_pull_downs_set
    __swig_getmethods__["suspend_pull_downs"] = _ftdi.ftdi_eeprom_suspend_pull_downs_get
    if _newclass:suspend_pull_downs = _swig_property(_ftdi.ftdi_eeprom_suspend_pull_downs_get, _ftdi.ftdi_eeprom_suspend_pull_downs_set)
    __swig_setmethods__["use_serial"] = _ftdi.ftdi_eeprom_use_serial_set
    __swig_getmethods__["use_serial"] = _ftdi.ftdi_eeprom_use_serial_get
    if _newclass:use_serial = _swig_property(_ftdi.ftdi_eeprom_use_serial_get, _ftdi.ftdi_eeprom_use_serial_set)
    __swig_setmethods__["change_usb_version"] = _ftdi.ftdi_eeprom_change_usb_version_set
    __swig_getmethods__["change_usb_version"] = _ftdi.ftdi_eeprom_change_usb_version_get
    if _newclass:change_usb_version = _swig_property(_ftdi.ftdi_eeprom_change_usb_version_get, _ftdi.ftdi_eeprom_change_usb_version_set)
    __swig_setmethods__["usb_version"] = _ftdi.ftdi_eeprom_usb_version_set
    __swig_getmethods__["usb_version"] = _ftdi.ftdi_eeprom_usb_version_get
    if _newclass:usb_version = _swig_property(_ftdi.ftdi_eeprom_usb_version_get, _ftdi.ftdi_eeprom_usb_version_set)
    __swig_setmethods__["max_power"] = _ftdi.ftdi_eeprom_max_power_set
    __swig_getmethods__["max_power"] = _ftdi.ftdi_eeprom_max_power_get
    if _newclass:max_power = _swig_property(_ftdi.ftdi_eeprom_max_power_get, _ftdi.ftdi_eeprom_max_power_set)
    __swig_setmethods__["manufacturer"] = _ftdi.ftdi_eeprom_manufacturer_set
    __swig_getmethods__["manufacturer"] = _ftdi.ftdi_eeprom_manufacturer_get
    if _newclass:manufacturer = _swig_property(_ftdi.ftdi_eeprom_manufacturer_get, _ftdi.ftdi_eeprom_manufacturer_set)
    __swig_setmethods__["product"] = _ftdi.ftdi_eeprom_product_set
    __swig_getmethods__["product"] = _ftdi.ftdi_eeprom_product_get
    if _newclass:product = _swig_property(_ftdi.ftdi_eeprom_product_get, _ftdi.ftdi_eeprom_product_set)
    __swig_setmethods__["serial"] = _ftdi.ftdi_eeprom_serial_set
    __swig_getmethods__["serial"] = _ftdi.ftdi_eeprom_serial_get
    if _newclass:serial = _swig_property(_ftdi.ftdi_eeprom_serial_get, _ftdi.ftdi_eeprom_serial_set)
    __swig_setmethods__["cbus_function"] = _ftdi.ftdi_eeprom_cbus_function_set
    __swig_getmethods__["cbus_function"] = _ftdi.ftdi_eeprom_cbus_function_get
    if _newclass:cbus_function = _swig_property(_ftdi.ftdi_eeprom_cbus_function_get, _ftdi.ftdi_eeprom_cbus_function_set)
    __swig_setmethods__["high_current"] = _ftdi.ftdi_eeprom_high_current_set
    __swig_getmethods__["high_current"] = _ftdi.ftdi_eeprom_high_current_get
    if _newclass:high_current = _swig_property(_ftdi.ftdi_eeprom_high_current_get, _ftdi.ftdi_eeprom_high_current_set)
    __swig_setmethods__["invert"] = _ftdi.ftdi_eeprom_invert_set
    __swig_getmethods__["invert"] = _ftdi.ftdi_eeprom_invert_get
    if _newclass:invert = _swig_property(_ftdi.ftdi_eeprom_invert_get, _ftdi.ftdi_eeprom_invert_set)
    __swig_setmethods__["size"] = _ftdi.ftdi_eeprom_size_set
    __swig_getmethods__["size"] = _ftdi.ftdi_eeprom_size_get
    if _newclass:size = _swig_property(_ftdi.ftdi_eeprom_size_get, _ftdi.ftdi_eeprom_size_set)
    def __init__(self): 
        this = _ftdi.new_ftdi_eeprom()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ftdi.delete_ftdi_eeprom
    __del__ = lambda self : None;
ftdi_eeprom_swigregister = _ftdi.ftdi_eeprom_swigregister
ftdi_eeprom_swigregister(ftdi_eeprom)


def ftdi_init(*args):
  return _ftdi.ftdi_init(*args)
ftdi_init = _ftdi.ftdi_init

def ftdi_new():
  return _ftdi.ftdi_new()
ftdi_new = _ftdi.ftdi_new

def ftdi_set_interface(*args):
  return _ftdi.ftdi_set_interface(*args)
ftdi_set_interface = _ftdi.ftdi_set_interface

def ftdi_deinit(*args):
  return _ftdi.ftdi_deinit(*args)
ftdi_deinit = _ftdi.ftdi_deinit

def ftdi_free(*args):
  return _ftdi.ftdi_free(*args)
ftdi_free = _ftdi.ftdi_free

def ftdi_set_usbdev(*args):
  return _ftdi.ftdi_set_usbdev(*args)
ftdi_set_usbdev = _ftdi.ftdi_set_usbdev

def ftdi_usb_find_all(*args):
  return _ftdi.ftdi_usb_find_all(*args)
ftdi_usb_find_all = _ftdi.ftdi_usb_find_all

def ftdi_list_free(*args):
  return _ftdi.ftdi_list_free(*args)
ftdi_list_free = _ftdi.ftdi_list_free

def ftdi_list_free2(*args):
  return _ftdi.ftdi_list_free2(*args)
ftdi_list_free2 = _ftdi.ftdi_list_free2

def ftdi_usb_get_strings(*args):
  return _ftdi.ftdi_usb_get_strings(*args)
ftdi_usb_get_strings = _ftdi.ftdi_usb_get_strings

def ftdi_usb_open(*args):
  return _ftdi.ftdi_usb_open(*args)
ftdi_usb_open = _ftdi.ftdi_usb_open

def ftdi_usb_open_desc(*args):
  return _ftdi.ftdi_usb_open_desc(*args)
ftdi_usb_open_desc = _ftdi.ftdi_usb_open_desc

def ftdi_usb_open_desc_index(*args):
  return _ftdi.ftdi_usb_open_desc_index(*args)
ftdi_usb_open_desc_index = _ftdi.ftdi_usb_open_desc_index

def ftdi_usb_open_dev(*args):
  return _ftdi.ftdi_usb_open_dev(*args)
ftdi_usb_open_dev = _ftdi.ftdi_usb_open_dev

def ftdi_usb_open_string(*args):
  return _ftdi.ftdi_usb_open_string(*args)
ftdi_usb_open_string = _ftdi.ftdi_usb_open_string

def ftdi_usb_close(*args):
  return _ftdi.ftdi_usb_close(*args)
ftdi_usb_close = _ftdi.ftdi_usb_close

def ftdi_usb_reset(*args):
  return _ftdi.ftdi_usb_reset(*args)
ftdi_usb_reset = _ftdi.ftdi_usb_reset

def ftdi_usb_purge_rx_buffer(*args):
  return _ftdi.ftdi_usb_purge_rx_buffer(*args)
ftdi_usb_purge_rx_buffer = _ftdi.ftdi_usb_purge_rx_buffer

def ftdi_usb_purge_tx_buffer(*args):
  return _ftdi.ftdi_usb_purge_tx_buffer(*args)
ftdi_usb_purge_tx_buffer = _ftdi.ftdi_usb_purge_tx_buffer

def ftdi_usb_purge_buffers(*args):
  return _ftdi.ftdi_usb_purge_buffers(*args)
ftdi_usb_purge_buffers = _ftdi.ftdi_usb_purge_buffers

def ftdi_set_baudrate(*args):
  return _ftdi.ftdi_set_baudrate(*args)
ftdi_set_baudrate = _ftdi.ftdi_set_baudrate

def ftdi_set_line_property(*args):
  return _ftdi.ftdi_set_line_property(*args)
ftdi_set_line_property = _ftdi.ftdi_set_line_property

def ftdi_set_line_property2(*args):
  return _ftdi.ftdi_set_line_property2(*args)
ftdi_set_line_property2 = _ftdi.ftdi_set_line_property2

def ftdi_read_data_set_chunksize(*args):
  return _ftdi.ftdi_read_data_set_chunksize(*args)
ftdi_read_data_set_chunksize = _ftdi.ftdi_read_data_set_chunksize

def ftdi_write_data(*args):
  return _ftdi.ftdi_write_data(*args)
ftdi_write_data = _ftdi.ftdi_write_data

def ftdi_write_data_set_chunksize(*args):
  return _ftdi.ftdi_write_data_set_chunksize(*args)
ftdi_write_data_set_chunksize = _ftdi.ftdi_write_data_set_chunksize

def ftdi_enable_bitbang(*args):
  return _ftdi.ftdi_enable_bitbang(*args)
ftdi_enable_bitbang = _ftdi.ftdi_enable_bitbang

def ftdi_disable_bitbang(*args):
  return _ftdi.ftdi_disable_bitbang(*args)
ftdi_disable_bitbang = _ftdi.ftdi_disable_bitbang

def ftdi_set_bitmode(*args):
  return _ftdi.ftdi_set_bitmode(*args)
ftdi_set_bitmode = _ftdi.ftdi_set_bitmode

def ftdi_set_latency_timer(*args):
  return _ftdi.ftdi_set_latency_timer(*args)
ftdi_set_latency_timer = _ftdi.ftdi_set_latency_timer

def ftdi_setflowctrl(*args):
  return _ftdi.ftdi_setflowctrl(*args)
ftdi_setflowctrl = _ftdi.ftdi_setflowctrl

def ftdi_setdtr_rts(*args):
  return _ftdi.ftdi_setdtr_rts(*args)
ftdi_setdtr_rts = _ftdi.ftdi_setdtr_rts

def ftdi_setdtr(*args):
  return _ftdi.ftdi_setdtr(*args)
ftdi_setdtr = _ftdi.ftdi_setdtr

def ftdi_setrts(*args):
  return _ftdi.ftdi_setrts(*args)
ftdi_setrts = _ftdi.ftdi_setrts

def ftdi_set_event_char(*args):
  return _ftdi.ftdi_set_event_char(*args)
ftdi_set_event_char = _ftdi.ftdi_set_event_char

def ftdi_set_error_char(*args):
  return _ftdi.ftdi_set_error_char(*args)
ftdi_set_error_char = _ftdi.ftdi_set_error_char

def ftdi_eeprom_setsize(*args):
  return _ftdi.ftdi_eeprom_setsize(*args)
ftdi_eeprom_setsize = _ftdi.ftdi_eeprom_setsize

def ftdi_eeprom_initdefaults(*args):
  return _ftdi.ftdi_eeprom_initdefaults(*args)
ftdi_eeprom_initdefaults = _ftdi.ftdi_eeprom_initdefaults

def ftdi_eeprom_free(*args):
  return _ftdi.ftdi_eeprom_free(*args)
ftdi_eeprom_free = _ftdi.ftdi_eeprom_free

def ftdi_eeprom_decode(*args):
  return _ftdi.ftdi_eeprom_decode(*args)
ftdi_eeprom_decode = _ftdi.ftdi_eeprom_decode

def ftdi_read_eeprom_getsize(*args):
  return _ftdi.ftdi_read_eeprom_getsize(*args)
ftdi_read_eeprom_getsize = _ftdi.ftdi_read_eeprom_getsize

def ftdi_erase_eeprom(*args):
  return _ftdi.ftdi_erase_eeprom(*args)
ftdi_erase_eeprom = _ftdi.ftdi_erase_eeprom

def ftdi_read_eeprom_location(*args):
  return _ftdi.ftdi_read_eeprom_location(*args)
ftdi_read_eeprom_location = _ftdi.ftdi_read_eeprom_location

def ftdi_write_eeprom_location(*args):
  return _ftdi.ftdi_write_eeprom_location(*args)
ftdi_write_eeprom_location = _ftdi.ftdi_write_eeprom_location

def ftdi_get_error_string(*args):
  return _ftdi.ftdi_get_error_string(*args)
ftdi_get_error_string = _ftdi.ftdi_get_error_string


